<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.yinhe.dama.mapper.DataAccountMapper">
    <resultMap id="BaseResultMap" type="com.yinhe.dama.entity.DataAccount" >
        <id column="accid" property="accid" jdbcType="BIGINT" />
        <result column="u_id" property="u_id" jdbcType="BIGINT" />
        <result column="account" property="account" jdbcType="VARCHAR" />
        <result column="password" property="password" jdbcType="VARCHAR" />
        <result column="logon_time" property="logon_time" jdbcType="VARCHAR" />
        <result column="establish_time" property="establish_time" jdbcType="VARCHAR" />
        <result column="authority" property="authority" jdbcType="INTEGER" />
        <result column="moduleo_authority" property="moduleo_authority" jdbcType="VARCHAR" />
        <result column="modulet_authority" property="modulet_authority" jdbcType="VARCHAR" />
        <result column="operate_authority" property="operate_authority" jdbcType="VARCHAR" />
        <result column="ip" property="ip" jdbcType="VARCHAR" />
        <result column="state" property="state" jdbcType="INTEGER" />
        <result column="remark" property="remark" jdbcType="VARCHAR" />
        <collection property="dataUser" ofType="com.yinhe.dama.entity.DataUser">
            <result column="name" property="name" jdbcType="VARCHAR" />
            <result column="phone" property="phone" jdbcType="VARCHAR" />
            <result column="company" property="company" jdbcType="VARCHAR" />
            <result column="remark" property="remark" jdbcType="VARCHAR" />
        </collection>
    </resultMap>

    <sql id="Base_Column_List" >
    accid, u_id,account, password, logon_time, establish_time,authority,moduleo_authority,modulet_authority,operate_authority,ip,state,remark
    </sql>

    <!--登录查询-->
    <select id="selectDataAccount" parameterType="DataAccount" resultMap="BaseResultMap">
  	  select * from data_account b left join data_user a on a.uid = b.u_id where b.account = #{account} and b.password = #{password}
    </select>

    <!--多条件分页查询-->
    <select id="selectDaac" parameterType="DataAccount" resultMap="BaseResultMap" flushCache="true" useCache="false">
        select * from data_account a left join data_user b on a.u_id = b.uid where 1=1
        <if test="account != null" >
            and a.account LIKE  CONCAT(CONCAT('%', #{account,jdbcType=VARCHAR} ), '%')
        </if>
        <if test="authority != null" >
            and a.authority LIKE  CONCAT(CONCAT('%', #{authority,jdbcType=VARCHAR} ),'%')
        </if>
        <if test="u_name != null" >
            and b.u_name LIKE  CONCAT(CONCAT('%', #{u_name,jdbcType=VARCHAR} ),'%')
        </if>
        limit #{page,jdbcType=BIGINT} , #{pageSize,jdbcType=BIGINT}
    </select>

    <!--查询总数 -->
    <select id="selectCont" parameterType="DataAccount" resultType="Integer" flushCache="true" useCache="false">
        select count(*) from data_account a left join data_user b on a.u_id = b.uid where 1=1
        <if test="account != null" >
            and a.account LIKE  CONCAT(CONCAT('%', #{account,jdbcType=VARCHAR} ), '%')
        </if>
        <if test="authority != null" >
            and a.authority LIKE  CONCAT(CONCAT('%', #{authority,jdbcType=VARCHAR} ),'%')
        </if>
        <if test="u_name != null" >
            and b.u_name LIKE  CONCAT(CONCAT('%', #{u_name,jdbcType=VARCHAR} ),'%')
        </if>
    </select>

    <!--根据id查询-->
    <select id="selectAcid"  resultType="DataAccount" flushCache="true" useCache="false">
        select <include refid="Base_Column_List" /> FROM data_account  where accid = #{accid}
    </select>

    <!--登录修改信息  -->
    <update id="upAcc" parameterType="DataAccount">
        update data_account set logon_time = #{logon_time},ip = #{ip} where account = #{account}
    </update>

    <!--修改账号用户外键  -->
    <update id="updateUid" parameterType="int[]">
        update data_account set u_id = NULL where u_id in
        <foreach collection="array" item="arr" index="no" open="("
                 separator="," close=")">
            #{arr}
        </foreach>
    </update>
</mapper>